#include <mbed.h>
#include <stdlib.h>
#include "MotorDC.h"

MotorDC M_izq(PTD3, PTC9, PTB23);  //pwma, ain1, ain2---- M2
MotorDC M_der(PTA1, PTB9, PTC1);  //pwmb, bin1, bin2---- M1

using namespace std;

struct Cell{
  bool north = false; //sets all cells' variables to false (= blank cell)
  bool south = false;
  bool east = false;
  bool west = false;
  bool checkpoint = false;
  bool start = false;
  bool black = false;
  bool visited = false;
  bool exit = false;
  int linkedFloor = 0;

  bool out = false;
  char victimStatus = 'F';
  char instructions[999];
  int instructionsWeight = 0;
  int weight = 9999; //sets a sealing for the weight to compare to
  int x, y, z;
};

int ySize = 40;//maximum expected width of the arena (worst case scenario: 20 usable)
int xSize = 40;//maximum expected height of the arena (worst case scenario: 20 usable)
bool finishedFloor = false;//this floor has been explored entirely
bool ignore = false;
char dir = 'N'; //points in which direction the robot is facing. it can be N, E, W or S.
int x = 20, y = 20, z = 0;//robot starts in the middle of the first floor.
int lastFloor = 0;

Cell lastCheckpoint;//The last checkpoint visited
Cell history[999];//A list of cells visited since the last checkpoint
int historyWeight = 0;//Keeps track of the last index used
Cell arena[5][40][40];//The arena is expected to be up to 5 floors of up to 20 x 20 tiles

Cell addOption(char a, Cell compareFrom, Cell compareTo, int addWeight) {
  compareTo.weight = compareFrom.weight + addWeight; //changes its weight
  for(int i = 0; i < compareFrom.instructionsWeight; i++){
    compareTo.instructions[i] = compareFrom.instructions[i];
  }
  //compareTo.instructions = compareFrom.instructions; //instructions to get to compareFrom are copied
  compareTo.instructions[compareTo.instructionsWeight] = a; //an extra instruction to get to compareFrom is added
  compareTo.instructionsWeight++;
  arena[z][compareTo.y][compareTo.x] = compareTo;//the matrix is updated with the newest information
  return compareTo;
}

bool check(int y, int x) {//returns true if at least one neighbour cell isn't explored and there's no wall between the robot and it
  if (!arena[z][y][x].north) {
    if (!arena[z][y-1][x].visited) {
      return true;
    }
  }
  if (!arena[z][y][x].south) {
    if (!arena[z][y+1][x].visited) {
      return true;
    }
  }
  if (!arena[z][y][x].east) {
    if (!arena[z][y][x+1].visited) {
      return true;
    }
  }
  if (!arena[z][y][x].west) {
    if (!arena[z][y][x-1].visited) {
      return true;
    }
  }
  return false;
}

bool end() { //checks if the whole room has been visited
  for (int i = 0; i < ySize; i++) {
    for (int j = 0; j < xSize; j++) {
      if (arena[z][i][j].visited && !arena[z][i][j].black) {
        if (check(i, j))return false;
      }
    }
  }
  return true;
}

void turn(char destination){
  switch(dir){
    case 'N':
      switch (destination){
        case 'N':
          break;
        case 'E':
          //girar 90° a la derecha
          break;
        case 'S':
          //girar 180°
          break;
        default:
          //girar 90° a la izquierda
          break;
      }
      break;

    case 'E':
      switch (destination){
        case 'N':
          //girar 90° a la izquierda
          break;
        case 'E':
          break;
        case 'S':
          //girar 90° a la derecha
          break;
        default:
          //girar 180°
          break;
      }
      break;

    case 'S':
      switch (destination){
        case 'N':
          //girar 180°;
          break;
        case 'E':
          //girar 90° a la izquierda
          break;
        case 'S':
          break;
        default:
          //girar 90° a la derecha
          break;
      }
      break;

    default:
      switch (destination){
        case 'N':
          //girar 90° a la derecha
          break;
        case 'E':
          //girar 180°
          break;
        case 'S':
          //girar 90° a la izquierda
          break;
      }

  }
  dir = destination;
}

void moveRobot(int front){

}

void follow(Cell target) {
  for (int i = 0; i < target.weight; i++) {
    //turn(target.instructions[i];
    turn(target.instructions[i]);
    switch(dir) { //blindly moves the robot to its target.
    case 'N':
      y--;
      moveRobot(1);
      break;

    case 'S':
      y++;
      moveRobot(1);
      break;

    case 'W':
      x--;
      moveRobot(1);
      break;

    default:
      x++;
      moveRobot(1);
    }
  }
}

void search(Cell compareFrom) {
  Cell compareTo;//cell that's going to be visited from compareFrom
  Cell options[9999];//array which stores the cells that later can be used to compare from
  arena[z][compareFrom.y][compareFrom.x].weight = 0;//current cell's value is 0
  compareFrom.weight = 0;
  finishedFloor = end();
  int amount = 0;//amount of cells in the array
  int weightGain = 1;

  while ((!check(compareFrom.y, compareFrom.x) && !finishedFloor) || (finishedFloor && ((!compareFrom.start && z == 0) || (!compareFrom.exit && z != 0)))) {//until it starts comparing from a cell with unvisited neighbours
    arena[z][compareFrom.y][compareFrom.x].out = true;//the cell is marked on the matrix

    if (!compareFrom.north) {//if there's no north wall
      if (!arena[z][compareFrom.y-1][compareFrom.x].out && !(arena[z][compareFrom.y-1][compareFrom.x].black && arena[z][compareFrom.y-1][compareFrom.x].visited)) {//if the north cell hasn't been explored
        compareTo = arena[z][compareFrom.y-1][compareFrom.x];//it's used to compare
        if(('N' != compareFrom.instructions[compareFrom.instructionsWeight - 1] && compareFrom.weight != 0) || (compareFrom.weight == 0 && 'N' != dir))weightGain++;//Add weight if a turn is involved
        if (compareFrom.weight + weightGain < compareTo.weight) { //if traveling from the actual place there is better than from the last place
          options[amount] = addOption('N', compareFrom, compareTo, weightGain);
          amount++; //amount of options is incremented
        }
      }
    }

    if (!compareFrom.east && compareFrom.x != xSize-1) {//if there's no east wall
      if (!arena[z][compareFrom.y][compareFrom.x+1].out && !(arena[z][compareFrom.y][compareFrom.x+1].black && arena[z][compareFrom.y][compareFrom.x+1].visited)) {//the right cell hasn't been explored yet
        compareTo = arena[z][compareFrom.y][compareFrom.x+1];//used to comapre
        if(('E' != compareFrom.instructions[compareFrom.instructionsWeight - 1] && compareFrom.weight != 0) || (compareFrom.weight == 0 && 'E' != dir))weightGain++;//Add weight if a turn is involved
        if (compareFrom.weight+1 < compareTo.weight) { //if traveling from the actual place there is better than from the last place
          options[amount] = addOption('E', compareFrom, compareTo, weightGain);
          amount++; //amount of options is incremented
        }
      }
    }

    if (!compareFrom.south && compareFrom.y != ySize-1) {//if there's no south wall
      if (!arena[z][compareFrom.y+1][compareFrom.x].out && !(arena[z][compareFrom.y+1][compareFrom.x].black && arena[z][compareFrom.y+1][compareFrom.x].visited)) {//if the south cell hasn't been explored yet
        compareTo = arena[z][compareFrom.y+1][compareFrom.x];//used to compare
        if(('S' != compareFrom.instructions[compareFrom.instructionsWeight - 1] && compareFrom.weight != 0) || (compareFrom.weight == 0 && 'S' != dir))weightGain++;//Add weight if a turn is involved
        if (compareFrom.weight+1 < compareTo.weight) { //if traveling from the actual place there is better than from the last place
          options[amount] = addOption('S', compareFrom, compareTo, weightGain);
          amount++; //amount of options is incremented
        }
      }
    }

    if (!compareFrom.west) {//if there's no west wall
      if (!arena[z][compareFrom.y][compareFrom.x-1].out && !(arena[z][compareFrom.y][compareFrom.x-1].black && arena[z][compareFrom.y][compareFrom.x-1].visited)) {//if the west cell hasn't been explored yet
        compareTo = arena[z][compareFrom.y][compareFrom.x-1];//used to compareSe usa para comparar
        if(('W' != compareFrom.instructions[compareFrom.instructionsWeight - 1] && compareFrom.weight != 0) || (compareFrom.weight == 0 && 'W' != dir))weightGain++;//Add weight if a turn is involved
        if (compareFrom.weight+1 < compareTo.weight) { //if traveling from the actual place there is better than from the last place
          options[amount] = addOption('W', compareFrom, compareTo, weightGain);
          amount++; //amount of options is incremented
        }
      }
    }

    int bestWeight = 9999;
    for (int i = 0; i < amount; i++) {//reads the array to find the lower cost cells
      if (arena[z][options[i].y][options[i].x].weight < bestWeight && !arena[z][options[i].y][options[i].x].out) {
        bestWeight = options[i].weight;
      }
    }

    for (int i = 0; i < amount; i++) {
      if (!arena[z][options[i].y][options[i].x].out && arena[z][options[i].y][options[i].x].weight == bestWeight) {
        compareFrom = options[i];
        break;
      }
    }
  }

  follow(compareFrom);

  for (int i = 0; i < ySize; i++) {
    for (int j = 0; j < xSize; j++) {
      arena[z][i][j].weight = 9999;
      arena[z][i][j].out = false;
      arena[z][i][j].instructionsWeight = 0;
    }
  }
  ignore = true;
}

void init() {
  if (check(y, x)) {
    switch(dir) { //if a neighbour cell hasn't been explored yet and there no wall in between, it changes the direction the robot is facing at

    case 'N':
      turn('W');
      if (!arena[z][y][x].west)
        if (!arena[z][y][x-1].visited) break;

    case 'W':
      turn('S');
      if (!arena[z][y][x].south)
        if (!arena[z][y+1][x].visited) break;

    case 'S':
      turn('E');
      if (!arena[z][y][x].east)
        if (!arena[z][y][x+1].visited) break;

    case 'E':
      turn('N');
      if (!arena[z][y][x].north)
        if (!arena[z][y-1][x].visited) break;
      init();
    }
    ignore = true;
  }
  else ignore = true;
}

void loadData(){
  Cell load;/*
  load.black = (cny < BLACK);
  load.checkpoint = (cny > CHECKPOINT);
  load.north = ( && );
  load.east = ( && );
  load.south = ( && );
  load.west = ( && );*/
  arena[z][y][x] = load;
}

void changeDir() { //changes robot's direction
  bool f = false;
  switch (dir) {
  case 'N'://it's going north
    if (!arena[z][y][x].east) {//if the east cell isn't explored and has no wall in between
      if (!arena[z][y][x+1].visited) {
        turn('E');
        ignore = true;
        f = true;
      }
    }
    if (f != true) { //else if the north cell hasn't been explored and has no wall between
      if (arena[z][y][x].north) init();
      else if (arena[z][y-1][x].visited)init();
    }
    break;

  case 'W'://it's going left
    if (!arena[z][y][x].north) {//if the north cell isn't explored and has no wall in between
      if (!arena[z][y-1][x].visited) {
        turn('N');
        ignore = true;
        f = true;
      }
    }
    if (f != true) { //else if the west cell hasn't been explored and has no wall between
      if (arena[z][y][x].west) init();
      else if (arena[z][y][x-1].visited)init();
    }
    break;

  case 'S'://it's going down
    if (!arena[z][y][x].west) {//if the west cell isn't explored and has no wall in between
      if (!arena[z][y][x-1].visited) {
        turn('W');
        ignore = true;
        f = true;
      }
    }
    if (f != true) { //else if the south cell hasn't been explored and has no wall between
      if (arena[z][y][x].south) init();
      else if (arena[z][y+1][x].visited)init();
    }
    break;

  default: //it's going right
    if (!arena[z][y][x].south) {//if the south cell isn't explored and has no wall in between
      if (!arena[z][y+1][x].visited) {
        turn('S');
        ignore = true;
        f = true;
      }
    }
    if (f != true) { //else if the east cell hasn't been explored and has no wall between
      if (arena[z][y][x].east) init();
      else if (arena[z][y][x+1].visited)init();
    }
  }
}

void run() {
  {
    switch(dir) { //what indexes the characters refer to
    case 'N':
      y--;
      moveRobot(1);
      break;
    case 'E':
      x++;
      moveRobot(1);
      break;
    case 'S':
      y++;
      moveRobot(1);
      break;
    default:
      x--;
      moveRobot(1);
    }
    loadData();

    arena[z][y][x].visited = true; //sets the current cell as visited
    if (!arena[z][y][x].checkpoint){
      history[historyWeight] = arena[z][y][x];
      historyWeight++;
    } //if it's not a checkpoint, it's added to the history of visited cells
    else { //if it is a checkpoint, sets it as the last visited checkpoint and resets the history
      historyWeight = 0;
      lastCheckpoint = arena[z][y][x];
    }

    if (arena[z][y][x].black) { //if it founds a black cell, it'll go back
      switch (dir) {
      case 'N':
        y++;
        moveRobot(-1);
        break;
      case 'E':
        x--;
        moveRobot(-1);
        break;
      case 'S':
        y--;
        moveRobot(-1);
        break;
      default:
        x++;
        moveRobot(-1);
      }
    }

    if (arena[z][y][x].exit) { //if it finds an exit
      if (!arena[z][y][x].checkpoint){
        history[historyWeight] = arena[z][y][x];
        historyWeight++;
      } //and the room isn't completed yet, it just adds it to the history
      else { //if the room's fully explored, it restarts the history and sets it as the last checkpoint
        historyWeight = 0;
        lastCheckpoint = arena[z][y][x];
      }
      arena[z][y][x].linkedFloor = ++lastFloor;
      arena[lastFloor][y][x].linkedFloor = z;
      //[INSERTE FUNCIÓN PARA SUBIR RAMPAS AQUÍ]//
      z = lastFloor;
      ignore = true;
      arena[z][y][x].visited = true;
    }
  }
}

void recorrer(){
  loadData();
  ignore = false;
  finishedFloor = false;
  if (!check(y, x)) { //if the robot is stuck
    if (!arena[z][y][x].exit) search(arena[z][y][x]); //if it's stuck on a ramp and the room isn't finished it'll continue exploring the room
    else if (!finishedFloor) search(arena[z][y][x]);//got stuck on a visited ramp, but there are still some tiles left unvisited.
    else{
      //[INSERTE FUNCIÓN PARA SUBIR O BAJAR UNA RAMPA AQUÍ]//
      z = arena[z][y][x].linkedFloor;
      ignore = true;
      arena[z][y][x].visited = true; //sets the cell as visited
      arena[z][y][x].exit = false;
      finishedFloor = false;
    }
  }
  else {
    changeDir();
    if (!ignore) run();
  }
}

int main(){
  while (true) {
    recorrer();
  }
  return(0);
}
